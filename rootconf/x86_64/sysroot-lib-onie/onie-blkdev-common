#  Copyright (C) 2014-2015 Curt Brune <curt@cumulusnetworks.com>
#
#  SPDX-License-Identifier:     GPL-2.0

onie_boot_mnt="/mnt/onie-boot"
uefi_esp_mnt="/boot/efi"

onie_root_dir="${onie_boot_mnt}/onie"
onie_config_dir="${onie_root_dir}/config"

grub_root_dir="${onie_boot_mnt}/grub"
grub_env_file="${grub_root_dir}/grubenv"

# gfdisk types and GPT UUIDs from gptfdisk-0.8.8/parttypes.cc
uefi_esp_gfdisk_type="0xEF00"
grub_boot_gfdisk_type="0xEF02"
onie_boot_gfdisk_type="0x3000"

uefi_esp_gpt_uuid="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
grub_boot_gpt_uuid="21686148-6449-6E6F-744E-656564454649"
onie_boot_gpt_uuid="7412F7D5-A156-4B13-81DC-867174929325"

uefi_esp_fs_type="vfat"
onie_boot_fs_type="ext4"

uefi_esp_label="EFI System"
grub_boot_label="GRUB-BOOT"
onie_boot_label="ONIE-BOOT"

# Return the /dev device corresponding to $onie_boot_label if it
# exists.
onie_get_boot_dev()
{
    local device=$(blkid | grep "$onie_boot_label" | sed -e 's/:.*$//')
    [ -n "$device" ] && echo -n "$device"
}

# Return the /dev disk corresponding to $onie_boot_label if it exists.
onie_get_boot_disk()
{
    local disk=$(onie_get_boot_dev)
    # Strip off the numbers
    disk="${disk%%[0-9]*}"
    [ -n "$disk" ] && echo -n "$disk"
}

# Return the partition number for the UEFI system partition.  Look on
# the ONIE boot disk.
onie_get_uefi_partition()
{
    local disk=$(onie_get_boot_disk)

    [ -n "$disk" ] || return

    local uefi_part=0
    local p=
    for p in $(seq 8) ; do
        if sgdisk -i $p $disk | grep -q $uefi_esp_gpt_uuid ; then
            uefi_part=$p
            break
        fi
    done

    if [ $uefi_part -ne 0 ] ; then
        echo -n "$uefi_part"
    fi
}

# Return the partition UUID for the UEFI system partition.  Look on
# the ONIE boot disk.
onie_get_uefi_uuid()
{
    local disk=$(onie_get_boot_disk)
    local uefi_part=$(onie_get_uefi_partition)

    if [ -n "$disk" -a -n "$uefi_part" ] ; then
        local uefi_uuid=$(blkid "${disk}$uefi_part" | sed -e 's/^.*UUID="//' -e 's/".*$//')
        echo -n $uefi_uuid
    fi
}

# Determine running firmware environment.  For UEFI require both of
# the following:
#
# - presence of /sys/firmware/efi/efivars
# - presence of UEFI System Partition GUID
#
# Otherwise assume running environment is BIOS-MBR based.
onie_get_running_firmware()
{
    if [ -d "/sys/firmware/efi/efivars" -a -n "$(onie_get_uefi_partition)" ] ; then
        echo -n "uefi" && return
    fi
    echo -n "bios"
}

#
# FSCK the given partition with retries.
#
run_fsck()
{

    local DEV="$1"

    if grep -s -w -i "forcefsck" /proc/cmdline >& /dev/null ; then
        local force="-f"
    else
        local force=""
    fi

    if [ "$FSCKFIX" = yes ] ; then
        local fix="-y"
    else
        local fix="-p"
    fi

    local FSCK=/usr/sbin/fsck
    if [ "$verbose" = "yes" ] ; then
        echo "Running fsck on $DEV ..."
        $FSCK $force $fix $DEV
        local retval=$?
    else
        $FSCK $force $fix $DEV > /dev/null 2>&1
        local retval=$?
    fi

    if [ $retval -gt 3 ]; then
        echo "ERROR  : fsck encountered fatal errors"
        echo "WARNING: Retrying fsck with -y option on $DEV"
        $FSCK -f -y $DEV
        retval=$?
        if [ $retval -gt 2 ]; then
            echo "ERROR: RUN fsck MANUALLY on $DEV without -y or -p options"
            return 1
        fi
    elif [ $retval -eq 2 ]; then
        echo "ERROR: fsck corrected errors, reboot requested."
    elif [ $retval -eq 1 ]; then
        echo "ERROR: fsck corrected errors."
    fi

    return 0
}

# Set ONIE environment variables.  The underlying store uses grubenv.
#
# arg $1 - variable name
# arg $2 - variable value [optional]
#
# If the variable value is not specified the effect is to delete the
# named variable.
onie_setenv()
{
    local var="$1"
    local val="$2"
    if [ -n "$val" ] ; then
        grub-editenv $grub_env_file set "$var"="$val"
    else
        # delete $var
        grub-editenv $grub_env_file unset "$var"
    fi
}

# Get an ONIE environment variable.  The underlying store uses
# grubenv.
#
# arg $1 - variable name
#
# If the variable name is not found the empty string "" is returned.
onie_getenv()
{
    local var="$1"
    local val=$(grub-editenv $grub_env_file list | grep "${var}=")
    val=${val#*=}
    echo -n $val
}

# Set the UEFI BootOrder variable such that $1 is the current OS
uefi_boot_first()
{
    # Step 1 - Determine the Boot number.
    local os="$1"
    local boot_num=$(efibootmgr -v | grep "$os" | grep ')File(' | tail -n 1 | awk '{ print $1 }')
    boot_num=${boot_num#Boot}
    # Remove trailing '*'
    boot_num=${boot_num%\*}

    # Step 2 - Update current BootOrder.  Prepend $boot_num
    # without duplicates.
    local boot_order=$(efibootmgr | grep BootOrder: | awk '{ print $2 }')
    boot_order="$(echo -n $boot_order | sed -e s/,$boot_num// -e s/$boot_num,// -e s/$boot_num//)"

    if [ -n "$boot_order" ] ; then
        boot_order="${boot_num},$boot_order"
    else
        boot_order="$boot_num"
    fi
    efibootmgr --quiet --bootorder "$boot_order" || {
        echo "ERROR: efibootmgr failed to create new boot variable on: $boot_dev"
        return 1
    }

    return 0

}

# For BIOS firmware, configure the system to boot ONIE into install
# mode at the next boot.
bios_boot_onie_install()
{
    local onie_dev="$(onie_get_boot_dev)"
    local boot_dev="$(onie_get_boot_disk)"

    # Re-install ONIE GRUB in MBR and ONIE partition
    local core_img="$onie_boot_mnt/grub/i386-pc/core.img"
    [ -f "$core_img" ] && chattr -i $core_img
    grub-install --boot-directory="$onie_boot_mnt" --recheck "$boot_dev" || {
        echo "ERROR: grub-install failed on: $boot_dev"
        exit 1
    }
    local grub_install_log=$(mktemp)
    grub-install --force --boot-directory="$onie_boot_mnt" \
        --recheck "$onie_dev" > /$grub_install_log 2>&1 || {
        echo "ERROR: grub-install failed on: $onie_dev"
        cat $grub_install_log && rm -f $grub_install_log
        exit 1
    }
    rm -f $grub_install_log
    [ -f "$core_img" ] && chattr +i $core_img

    # Return to install mode on the next boot
    onie-boot-mode -q -o install
}

# For UEFI firmware, configure the system to boot ONIE into install
# mode at the next boot.
uefi_boot_onie_install()
{
    # Set the UEFI BootOrder to boot into ONIE GRUB.
    uefi_boot_first "ONIE:" || {
        echo "ERROR: Unable to update UEFI BootOrder correctly"
        return 1
    }

    # Return to install mode on the next boot
    onie-boot-mode -q -o install
}

# Remove UEFI Boot numbers that reference non-existent files
uefi_rm_stale_bootnum()
{
    efibootmgr -v | grep ')File(' | awk '{ print $1 }' | while read boot_num ; do
        local boot_num=${boot_num%\*}
        local boot_path=$(efibootmgr -v | grep $boot_num | sed -e 's/.*)File(//' -e 's/)//' -e 's/\\/\//g')
        [ -r "$uefi_esp_mnt/$boot_path" ] || {
            boot_num=${boot_num#Boot}
            efibootmgr --quiet -b $boot_num -B
        }
    done
}

# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "/bin/sh" t nil)
# End:
