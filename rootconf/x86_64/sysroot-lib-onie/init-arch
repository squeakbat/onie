# Early boot time initializations for x86_64 architectures

#  Copyright (C) 2014 Curt Brune <curt@cumulusnetworks.com>
#  Copyright (C) 2014 david_yang <david_yang@accton.com>
#
#  SPDX-License-Identifier:     GPL-2.0

. /lib/onie/onie-blkdev-common

# Mount the ONIE partition at boot.  If the disk partition is
# unavailable (we are netbooted with a blank hard disk for example)
# then just create $onie_config_dir in the current ramdisk and
# proceed.

mkdir -p $onie_boot_mnt

local delay=70
local cnt=0
while [ $cnt -lt $delay ] ; do
    device=$(onie_get_boot_dev)
    [ -n "$device" ] && break;
    cnt=$(( $cnt + 1 ))
    sleep 0.1
done

# Handle mounting the ONIE-BOOT partition
init_onie_boot() {
    [ -n "$device" ] || {
        if [ "$boot_env" != "recovery" ] ; then
            echo "ERROR: Getting ONIE boot device timeout"
        fi
        return
    }

    # Create an /etc/fstab entry
    (cat <<EOF
# FSTAB entry for the ONIE-BOOT partition
LABEL=$onie_boot_label	$onie_boot_mnt	$onie_boot_fs_type	defaults,rw,errors=remount-ro	0	1
EOF
    ) > /etc/fstab

    # Check the filesystem for errors
    run_fsck $device || {
        echo "ERROR: Problems checking $onie_boot_label filesystem"
        # Use a ramdisk directory for onie_config_dir
        return
    }

    echo "Info: Mounting $onie_boot_label on $onie_boot_mnt ..."
    mount $onie_boot_mnt || {
        echo "ERROR: Problems mounting $onie_boot_label filesystem on $onie_boot_mnt"
        # Use a ramdisk directory for onie_config_dir
    }
}

init_onie_boot

mkdir -p $onie_config_dir

# Handle UEFI systems
init_uefi() {

    [ -d /sys/firmware/efi/efivars ] || return

    mount -t efivarfs efivarfs /sys/firmware/efi/efivars || {
        echo "ERROR: Problems mounting efivarfs filesystem on /sys/firmware/efi/efivars"
        return
    }

    # Mount the UEFI system partition at boot.  If the disk partition is
    # unavailable (we are netbooted with a blank hard disk for example)
    # then just skip it.

    uefi_uuid=$(onie_get_uefi_uuid)
    [ -n "$uefi_uuid" ] || return

    mkdir -p $uefi_esp_mnt

    # Append an /etc/fstab entry for the EFI System Partition
    (cat <<EOF

# FSTAB entry for the UEFI System Partition
UUID=$uefi_uuid	$uefi_esp_mnt	$uefi_esp_fs_type	defaults,rw,errors=remount-ro	0	1
EOF
    ) >> /etc/fstab

    local uefi_dev="$(onie_get_boot_disk)$(onie_get_uefi_partition)"
    # Check the filesystem for errors
    run_fsck "$uefi_dev" || {
        echo "ERROR: Problems checking $uefi_esp_label"
        return
    }

    echo "Info: Mounting $uefi_esp_label on $uefi_esp_mnt ..."
    mount $uefi_esp_mnt || {
        echo "ERROR: Problems mounting $uefi_esp_label filesystem on $uefi_esp_mnt"
        # Use a ramdisk directory
    }

}

init_uefi

# Local Variables:
# mode: shell-script
# eval: (sh-set-shell "/bin/sh" t nil)
# End:
